// <auto-generated />
using System;
using CounselVoting.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CounselVoting.Infrastructure.Migrations
{
    [DbContext(typeof(CounselContext))]
    partial class CounselContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("CounselVoting.Domain.Model.Measure", b =>
                {
                    b.Property<int>("MeasureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("MeasureId");

                    b.ToTable("Measures");

                    b.HasData(
                        new
                        {
                            MeasureId = 1,
                            Description = "Description for installing a front gate",
                            IsComplete = false,
                            Status = 0,
                            Subject = "Install a front gate"
                        },
                        new
                        {
                            MeasureId = 2,
                            Description = "Description for fixing the current generator",
                            IsComplete = false,
                            Status = 0,
                            Subject = "Fix the current generator"
                        },
                        new
                        {
                            MeasureId = 3,
                            Description = "Description for incresing the number of strata counsels",
                            IsComplete = false,
                            Status = 0,
                            Subject = "Increase the number of strata counsels"
                        });
                });

            modelBuilder.Entity("CounselVoting.Domain.Model.MeasureRule", b =>
                {
                    b.Property<int>("MeasureId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RuleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("MeasureId", "RuleId");

                    b.HasIndex("RuleId");

                    b.ToTable("MeasureRules");

                    b.HasData(
                        new
                        {
                            MeasureId = 1,
                            RuleId = 1,
                            Value = "5"
                        },
                        new
                        {
                            MeasureId = 2,
                            RuleId = 2,
                            Value = "80"
                        },
                        new
                        {
                            MeasureId = 3,
                            RuleId = 1,
                            Value = "10"
                        },
                        new
                        {
                            MeasureId = 3,
                            RuleId = 2,
                            Value = "50"
                        });
                });

            modelBuilder.Entity("CounselVoting.Domain.Model.MeasureVote", b =>
                {
                    b.Property<int>("VoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MeasureId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("VoteChoice")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("VoteDate")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.HasKey("VoteId");

                    b.HasIndex("MeasureId");

                    b.ToTable("MeasureVotes");
                });

            modelBuilder.Entity("CounselVoting.Domain.Model.Rule", b =>
                {
                    b.Property<int>("RuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RuleId");

                    b.ToTable("Rules");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Rule");
                });

            modelBuilder.Entity("CounselVoting.Domain.Model.CompletionRule", b =>
                {
                    b.HasBaseType("CounselVoting.Domain.Model.Rule");

                    b.HasDiscriminator().HasValue("CompletionRule");

                    b.HasData(
                        new
                        {
                            RuleId = 1,
                            Description = "Description for Minimum Votes Required Completion Rule",
                            Identifier = "MinimumVotesRequiredCompletionRule",
                            Name = "Minimum Votes Required Completion Rule"
                        },
                        new
                        {
                            RuleId = 2,
                            Description = "Description for Minimum Percentage Yes Votes Required Completion Rule",
                            Identifier = "MinimumPercentageYesVotesRequiredCompletionRule",
                            Name = "Minimum Percentage Yes Votes Required Completion Rule"
                        });
                });

            modelBuilder.Entity("CounselVoting.Domain.Model.VotingRule", b =>
                {
                    b.HasBaseType("CounselVoting.Domain.Model.Rule");

                    b.HasDiscriminator().HasValue("VotingRule");
                });

            modelBuilder.Entity("CounselVoting.Domain.Model.MeasureRule", b =>
                {
                    b.HasOne("CounselVoting.Domain.Model.Measure", "Measure")
                        .WithMany("Rules")
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CounselVoting.Domain.Model.Rule", "Rule")
                        .WithMany("MeasureRules")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Measure");

                    b.Navigation("Rule");
                });

            modelBuilder.Entity("CounselVoting.Domain.Model.MeasureVote", b =>
                {
                    b.HasOne("CounselVoting.Domain.Model.Measure", "Measure")
                        .WithMany("Votes")
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Measure");
                });

            modelBuilder.Entity("CounselVoting.Domain.Model.Measure", b =>
                {
                    b.Navigation("Rules");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("CounselVoting.Domain.Model.Rule", b =>
                {
                    b.Navigation("MeasureRules");
                });
#pragma warning restore 612, 618
        }
    }
}
